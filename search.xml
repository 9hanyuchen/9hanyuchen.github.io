<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>shell基本命令</title>
    <url>/2020/11/07/shell/</url>
    <content><![CDATA[<h3 id="1-grep"><a href="#1-grep" class="headerlink" title="1.grep"></a>1.grep</h3><p> 管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep 选项 查找内容 源文件</span><br></pre></td></tr></table></figure>







<h3 id="2-ps"><a href="#2-ps" class="headerlink" title="2.ps"></a>2.ps</h3><p>ps:process status 进程状态</p>
<p>如果直接用ps命令，会显示所有进程的状态，通常结合grep命令查看某进程的状态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | grep xxx				</span><br><span class="line">（功能描述：查看系统中所有进程）ps -aux | grep &quot;test.sh&quot;    #a:显示所有程序  u:以用户为主的格式来显示   x:显示所有程序，不以终端机来区分</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ps -ef | grep xxx      （功能描述：可以查看子父进程之间的关系）</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>如果想查看进程的 CPU 占用率和内存占用率，可以使用 aux;</p>
<p>如果想查看进程的父进程 ID 可以使用 ef;</p>
<h3 id="3-n"><a href="#3-n" class="headerlink" title="3. $n"></a>3. $n</h3><p>$n（功能描述：n 为数字，$0 代表该脚本名称，$1-$9 代表第一到第九个参数，十以上的参数，十以上的参 数需要用大括号包含，如${10}）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ touch parameter.sh</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class="line"></span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">echo &quot;$0	$1	$2&quot;</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 parameter.sh</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ .&#x2F;parameter.sh cls</span><br><span class="line"></span><br><span class="line">.&#x2F;parameter.sh 	cls	xz</span><br></pre></td></tr></table></figure>





<h3 id="4"><a href="#4" class="headerlink" title="4.$#"></a>4.$#</h3><p>获取所有输入参数个数，常用于循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class="line"></span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">echo &quot;$0  $1   $2&quot;</span><br><span class="line">echo $#</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ chmod 777 parameter.sh</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop101 datas]$ .&#x2F;parameter.sh cls  xz</span><br><span class="line">parameter.sh cls xz </span><br><span class="line">2</span><br></pre></td></tr></table></figure>



<p><strong>$？</strong></p>
<p>（功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[atguigu@hadoop101 datas]$ .&#x2F;helloworld.sh </span><br><span class="line">hello world</span><br><span class="line">[atguigu@hadoop101 datas]$ echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure>





<h3 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5. 运算符"></a>5. 运算符</h3><p>expr</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@ruozedata000 data]$ expr 2 + 3</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">[hadoop@ruozedata000 data]$ s&#x3D;$[(2+3)*4]</span><br><span class="line">[hadoop@ruozedata000 data]$ echo s</span><br><span class="line">s</span><br><span class="line">[hadoop@ruozedata000 data]$ echo $s</span><br><span class="line">20</span><br></pre></td></tr></table></figure>



<h3 id="6-条件判断"><a href="#6-条件判断" class="headerlink" title="6.条件判断"></a>6.条件判断</h3><p>[ condition ]（注意condition前后要有空格）</p>
<p><strong>1.常用判断条件</strong></p>
<p><strong>（1）两个整数之间比较</strong></p>
<p>= 字符串比较</p>
<p>-lt 小于（less than）         -le 小于等于（less equal）</p>
<p>-eq 等于（equal）              -gt 大于（greater than）</p>
<p>-ge 大于等于（greater equal）  -ne 不等于（Not equal）</p>
<p><strong>（2）按照文件权限进行判断</strong></p>
<p>-r 有读的权限（read）       -w 有写的权限（write）</p>
<p>-x 有执行的权限（execute）</p>
<p><strong>（3）按照文件类型进行判断</strong></p>
<p>-f 文件存在并且是一个常规的文件（file）</p>
<p>-e 文件存在（existence）     -d 文件存在并是一个目录（directory）</p>
<p>-s 文件存在且不为空      -L 文件存在且是一个链接(link)</p>
<h3 id="7-If"><a href="#7-If" class="headerlink" title="7. If"></a>7. If</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ 条件判断式 ] </span><br><span class="line">  	then </span><br><span class="line">			程序 </span><br><span class="line">    elif 条件判断式</span><br><span class="line">      then 程序..</span><br><span class="line">    else 程序..</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">if [ 条件判断式 ] ; then </span><br><span class="line">	程序.. </span><br><span class="line">elif [条件判断式] ; then </span><br><span class="line">	程序..</span><br><span class="line">else 程序</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<p>（1）[ 条件判断式 ]，中括号和条件判断式之间必须有空格</p>
<p>（2）if后要有空格</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ $1 -eq 1 ]</span><br><span class="line">then</span><br><span class="line">	echo &quot;输入为1&quot;</span><br><span class="line">elif [ $1 -eq 2 ]</span><br><span class="line">then</span><br><span class="line">	echo &quot;输入为2&quot;</span><br><span class="line">else	</span><br><span class="line">	echo &quot;输入为其他&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>





<h3 id="8-for循环"><a href="#8-for循环" class="headerlink" title="8. for循环"></a>8. for循环</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1．基本语法1</span><br><span class="line">	for (( 初始值;循环控制条件;变量变化 )) </span><br><span class="line">  do </span><br><span class="line">    程序 </span><br><span class="line">  done</span><br><span class="line">或</span><br><span class="line">for (( 初始值;循环控制条件;变量变化 )); do 程序; done</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">从1加到100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!bin/bash</span></span><br><span class="line">s=0</span><br><span class="line"></span><br><span class="line">for((i=0;i&lt;=100;i++))</span><br><span class="line">do</span><br><span class="line">	s=$[ $s+$i ]</span><br><span class="line">done</span><br><span class="line">echo $s</span><br></pre></td></tr></table></figure>

<p>注意： for((i=0;i&lt;=100;i++))    两层括号中间不能有空格</p>
<h3 id="9-自定义变量"><a href="#9-自定义变量" class="headerlink" title="9.自定义变量"></a>9.自定义变量</h3><p>9.1 定义单个变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@ruozedata000 ~]$ A&#x3D;5</span><br><span class="line">[hadoop@ruozedata000 ~]$ echo $A</span><br><span class="line">5</span><br></pre></td></tr></table></figure>



<p>9.2 变量运算</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@ruozedata000 ~]$ s=$[$s+3]</span><br><span class="line">[hadoop@ruozedata000 ~]$ echo $s</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在bash中，变量默认类型都是字符串类型，无法直接进行数值运算</span></span><br><span class="line">[atguigu@hadoop102 ~]$ C=1+2</span><br><span class="line">[atguigu@hadoop102 ~]$ echo $C</span><br><span class="line">1+2</span><br></pre></td></tr></table></figure>





<h3 id="10-dubug模式"><a href="#10-dubug模式" class="headerlink" title="10.dubug模式"></a>10.dubug模式</h3><p>Shell本身提供一些调试方法选项：</p>
<ul>
<li>-n，读一遍脚本中的命令但不执行，用于检查脚本中的语法错误。</li>
<li>-v，一边执行脚本，一边将执行过的脚本命令打印到标准输出。</li>
<li>-x，提供跟踪执行信息，将执行的每一条命令和结果依次打印出来。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@ruozedata000 data]$ sh -x forloop1.sh </span><br><span class="line">+ s&#x3D;0</span><br><span class="line">+ (( i&#x3D;0 ))</span><br><span class="line">+ (( i&lt;&#x3D;100 ))</span><br><span class="line">+ s&#x3D;0</span><br><span class="line">+ (( i++ ))</span><br><span class="line">+ (( i&lt;&#x3D;100 ))</span><br><span class="line">+ s&#x3D;1</span><br><span class="line">+ (( i++ ))</span><br></pre></td></tr></table></figure>



<h3 id="11-查看文件时显示行号"><a href="#11-查看文件时显示行号" class="headerlink" title="11. 查看文件时显示行号"></a>11. 查看文件时显示行号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@ruozedata000 data]$ cat -n if_instance.sh </span><br><span class="line">     1  #!&#x2F;bin&#x2F;bash</span><br><span class="line">     2  if [ $1 -eq 1 ]</span><br><span class="line">     3  then</span><br><span class="line">     4          echo &quot;输入为1&quot;</span><br><span class="line">     5  elif [ $1 -eq 2 ]</span><br><span class="line">     6  then</span><br><span class="line">     7          echo &quot;输入为2&quot;</span><br><span class="line">     8  else</span><br><span class="line">     9          echo &quot;输入为其他&quot;</span><br><span class="line">    10  fi</span><br></pre></td></tr></table></figure>





<h3 id="12-wc"><a href="#12-wc" class="headerlink" title="12.wc"></a>12.wc</h3><p>​    wc命令用来计算数字。利用wc指令我们可以计算文件的Byte数、字数或是列数。</p>
<table>
<thead>
<tr>
<th>选项参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-l</td>
<td>统计文件行数</td>
</tr>
<tr>
<td>-w</td>
<td>统计文件的单词数</td>
</tr>
<tr>
<td>-m</td>
<td>统计文件的字符数</td>
</tr>
<tr>
<td>-c</td>
<td>统计文件的字节数</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@ruozedata000 data]$ wc -l if_instance.sh </span><br><span class="line">10 if_instance.sh</span><br><span class="line">[hadoop@ruozedata000 data]$ wc -w if_instance.sh </span><br><span class="line">23 if_instance.sh</span><br><span class="line">[hadoop@ruozedata000 data]$ wc -m if_instance.sh </span><br><span class="line">105 if_instance.sh</span><br></pre></td></tr></table></figure>



<h3 id="13-cut"><a href="#13-cut" class="headerlink" title="13.cut"></a>13.cut</h3><p>cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p>
<p>说明：默认分隔符是制表符</p>
<table>
<thead>
<tr>
<th>选项参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-f</td>
<td>f为fileds，列号，提取第几列</td>
</tr>
<tr>
<td>-d</td>
<td>d为Descriptor分隔符，按照指定分隔符分割列</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@ruozedata000 data]$ echo $PATH</span><br><span class="line">/home/hadoop/app/spark/bin:/home/hadoop/app/flume/bin:/home/hadoop/app/hadoop/bin:/home/hadoop/app/hadoop/sbin:/home/hadoop/app/zookeeper/bin:/home/hadoop/app/hbase/bin:/home/hadoop/app/zookeeper/bin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/module/jdk1.8.0_144/bin:/opt/module/hadoop-2.7.2/bin:/opt/module/hadoop-2.7.2/sbin:/home/hadoop/app/scala-2.11.8/bin:/home/hadoop/bin</span><br><span class="line">[hadoop@ruozedata000 data]$ </span><br><span class="line">[hadoop@ruozedata000 data]$ echo $PATH | cut -d &#x27;:&#x27; -f 1</span><br><span class="line">/home/hadoop/app/spark/bin</span><br><span class="line"></span><br><span class="line">[hadoop@ruozedata000 data]$ echo $PATH | cut -d &#x27;:&#x27; -f 1,2</span><br><span class="line">/home/hadoop/app/spark/bin:/home/hadoop/app/flume/bin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选取系统 PATH 变量值，第 2 个“：”开始后的所有路径：</span></span><br><span class="line">[hadoop@ruozedata000 data]$ echo $PATH | cut -d &#x27;:&#x27; -f 2-</span><br></pre></td></tr></table></figure>



<h3 id="14-sed"><a href="#14-sed" class="headerlink" title="14.sed"></a>14.sed</h3><p>sed是一种<font color="red">流</font>编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。<font color="red">文件内容并没有改变</font>，除非你使用重定向存储输出。</p>
<table>
<thead>
<tr>
<th>选项参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-e</td>
<td>直接在指令列模式上进行sed的动作编辑。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>新增，a的后面可以接字串，在下一行出现</td>
</tr>
<tr>
<td>d</td>
<td>删除</td>
</tr>
<tr>
<td>s</td>
<td>查找并替换</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.将 jj 插入到 sed.txt 第二行下</span></span><br><span class="line">[hadoop@ruozedata000 data]$ sed &#x27;2a jj&#x27; sed.txt </span><br><span class="line">dong shen</span><br><span class="line">guan zhen</span><br><span class="line">jj</span><br><span class="line">wo  wo</span><br><span class="line">lai  lai</span><br><span class="line"></span><br><span class="line">le  le</span><br><span class="line"></span><br><span class="line">[hadoop@ruozedata000 data]$ cat  sed.txt </span><br><span class="line">dong shen</span><br><span class="line">guan zhen</span><br><span class="line">wo  wo</span><br><span class="line">lai  lai</span><br><span class="line"></span><br><span class="line">le  le</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 2.删除 sed.txt 文件所有包含 wo 的行</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



















<h3 id="15-管道"><a href="#15-管道" class="headerlink" title="15. | 管道"></a>15. | 管道</h3><p>| 表示管道，上一条命令的输出</p>
]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>在Hexo博客中发布文章</title>
    <url>/2021/06/06/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h4 id="1、新建一篇文章"><a href="#1、新建一篇文章" class="headerlink" title="1、新建一篇文章"></a>1、新建一篇文章</h4><p>（1）在hexo博客目录下，进入Git Bash命令窗口中，输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(base) hyc@hanyuchendeMacBook-Pro _posts % hexo new &quot;在Hexo博客中发布文章&quot;</span><br></pre></td></tr></table></figure>

<p>（2）在博客目录下的 /Users/hyc/hycBlog/blog/source/_posts/在Hexo博客中发布文章.md </p>
<p>（3）在.md文件中编辑自己的博客文章即可。</p>
<h4 id="2、给文章添加分类和标签"><a href="#2、给文章添加分类和标签" class="headerlink" title="2、给文章添加分类和标签"></a>2、给文章添加分类和标签</h4><p>(1) 在(.md）文件中设置tags和categories属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 在Hexo博客中发布文章</span><br><span class="line">date: 2021-01-01 11:41:10</span><br><span class="line">tags:</span><br><span class="line">- 博客           &#x2F;&#x2F;多个标签可以这样添加</span><br><span class="line">- hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<h4 id="3、启动服务器，本地测试"><a href="#3、启动服务器，本地测试" class="headerlink" title="3、启动服务器，本地测试"></a>3、启动服务器，本地测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>



<h4 id="4、添加“阅读全文”按钮"><a href="#4、添加“阅读全文”按钮" class="headerlink" title="4、添加“阅读全文”按钮"></a>4、添加“阅读全文”按钮</h4><p><strong>方法一</strong>：在文章任意你想添加的位置添加即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;        </span><br></pre></td></tr></table></figure>

<p>例如：<br>在.md里面的内容是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 在这里</span><br><span class="line">date: 2018-08-02 11:41:10</span><br><span class="line">tags:</span><br><span class="line">- 博客</span><br><span class="line">- hexo</span><br><span class="line">---</span><br><span class="line">javascript是一门充满活力、简单易用的语言，又是一门具有许多复杂微妙技术的语言。即使是经验丰富的javascript开发者，如果没有认真学习的话，也无法真正理解它们，这就是javascript的矛盾之处。由于javascript不必理解就可以使用，因此通常来说很难真正理解语言本身，这就是我们面临的挑战。不满足于只是让代码正常工作，而是想要弄清楚为什么，勇于挑战这条崎岖颠簸的少有人走的路，拥抱整个javascript</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">后面的内容在首页不显示，只显示到&lt;!--more--&gt;这里</span><br></pre></td></tr></table></figure>



<p><strong>方法二</strong>：设置首页文章以摘要形式显示，打开主题配置文件，找到auto_excerpt进行修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>

<p>其中length代表显示摘要的截取字符长度。<br>注：这两种方法，在博客首页显示的效果不一样，根据自己的需要，选择自己喜欢的方法</p>
<h4 id="5、发布到Github上"><a href="#5、发布到Github上" class="headerlink" title="5、发布到Github上"></a>5、发布到Github上</h4><p>（1）发表的文章在本地预览无误后，在 Git Bash 命令窗口执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>（2）在浏览器，访问自己的博客域名，即可看到刚 发布的文章</p>
]]></content>
      <tags>
        <tag>博客           //多个标签可以这样添加</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
